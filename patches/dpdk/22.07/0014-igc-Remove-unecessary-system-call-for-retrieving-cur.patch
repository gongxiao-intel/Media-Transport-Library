From d6d486a372b02e1e9948f71180f0805781b4a154 Mon Sep 17 00:00:00 2001
From: gongxiao-intel <xiaoyan.gong@intel.com>
Date: Tue, 13 Dec 2022 10:55:41 +0000
Subject: [PATCH 14/14] igc: Remove unecessary system call for retrieving
 current time in launch time caculation

---
 drivers/net/igc/igc_ethdev.c |  1 +
 drivers/net/igc/igc_ethdev.h |  2 +-
 drivers/net/igc/igc_txrx.c   | 23 +++++++----------------
 3 files changed, 9 insertions(+), 17 deletions(-)

diff --git a/drivers/net/igc/igc_ethdev.c b/drivers/net/igc/igc_ethdev.c
index 8508670474..4273ca20e4 100644
--- a/drivers/net/igc/igc_ethdev.c
+++ b/drivers/net/igc/igc_ethdev.c
@@ -1010,6 +1010,7 @@ eth_igc_start(struct rte_eth_dev *dev)
 		baset_l = adapter->base_time % NSEC_PER_SEC;
 		IGC_WRITE_REG(hw, IGC_BASET_H, baset_h);
 		IGC_WRITE_REG(hw, IGC_BASET_L, baset_l);
+    adapter->last_frst_time = adapter->base_time;
     
     for(uint8_t i = 0; i < IGC_QUEUE_PAIRS_NUM; i ++) {
       txqctl = 0;
diff --git a/drivers/net/igc/igc_ethdev.h b/drivers/net/igc/igc_ethdev.h
index 9ef090b62f..589ae39a41 100644
--- a/drivers/net/igc/igc_ethdev.h
+++ b/drivers/net/igc/igc_ethdev.h
@@ -243,7 +243,7 @@ struct igc_adapter {
 	struct igc_flow_list flow_list;
   uint64_t base_time;
   uint32_t cycle_time;
-  uint64_t last_ff_cycle;
+  uint64_t last_frst_time;
 };
 
 #define IGC_DEV_PRIVATE(_dev)	((_dev)->data->dev_private)
diff --git a/drivers/net/igc/igc_txrx.c b/drivers/net/igc/igc_txrx.c
index 40f621ddad..8af1a95d0c 100644
--- a/drivers/net/igc/igc_txrx.c
+++ b/drivers/net/igc/igc_txrx.c
@@ -1512,28 +1512,19 @@ what_advctx_update(struct igc_tx_queue *txq, uint64_t flags,
 
 static __le32 igc_tx_launchtime(struct igc_tx_queue *txq, uint64_t txtime, bool *first_flag)
 {
-	uint64_t base_time = 0;
-	uint64_t cycle_time = NSEC_PER_SEC;
 	uint32_t launchtime;
-  struct timespec now_ts;
-  uint64_t now, n, baset_est, end_of_cycle;;
+  uint64_t n_cur, n_last;
   
   struct igc_adapter *adapter = IGC_DEV_PRIVATE(txq->dev);
   
-  clock_gettime(CLOCK_REALTIME, &now_ts);
-  now = now_ts.tv_sec * NSEC_PER_SEC + now_ts.tv_nsec;
-  n = (now - adapter->base_time) / adapter->cycle_time;
-  baset_est = adapter->base_time + cycle_time * n;
-  end_of_cycle = baset_est + adapter->cycle_time;
+  n_cur = (txtime - adapter->base_time) / adapter->cycle_time;
+  n_last = (adapter->last_frst_time - adapter->base_time) / adapter->cycle_time;
   
-  if (txtime >= end_of_cycle) {
-    if (baset_est != adapter->last_ff_cycle) {
-			*first_flag = true;
-			adapter->last_ff_cycle = baset_est;      
-    }
+  if (n_cur > n_last) {
+    *first_flag = true;
+    adapter->last_frst_time = txtime;
   }
-
-	launchtime = (txtime - base_time) % cycle_time;
+	launchtime = (txtime - adapter->base_time) % adapter->cycle_time;
 
 	return rte_cpu_to_le_32(launchtime);
 }
-- 
2.25.1

