From 0798e73394364ae2df4acf887d6e6ecaed98a88d Mon Sep 17 00:00:00 2001
From: yanfengp <yanfeng.pu@intel.com>
Date: Wed, 18 Jan 2023 12:10:54 +0800
Subject: [PATCH] enable qbv and extend packet buffer size

---
 drivers/net/igc/base/igc_regs.h |  3 ++-
 drivers/net/igc/igc_ethdev.c    | 30 +++++++++++++++++++++++++-----
 drivers/net/igc/igc_txrx.c      |  2 +-
 3 files changed, 28 insertions(+), 7 deletions(-)

diff --git a/drivers/net/igc/base/igc_regs.h b/drivers/net/igc/base/igc_regs.h
index a331f8d5e1..f3362893c2 100644
--- a/drivers/net/igc/base/igc_regs.h
+++ b/drivers/net/igc/base/igc_regs.h
@@ -737,7 +737,8 @@
 #define IGC_TQAVCC(_n)               (0x3004 + ((_n) * 0x40))
 #define IGC_TQAVHC(_n)               (0x300C + ((_n) * 0x40))
 #define IGC_GTXOFFSET                0x3310
-#define IGC_TXPBSIZE_TSN  0x04145145
+//#define IGC_TXPBSIZE_TSN  0x04145145
+#define IGC_TXPBSIZE_TSN  0x0408208e
 #define IGC_ADVTXD_TSN_CNTX_FIRST 0x00000080
 #define IGC_TXQCTL_DATA_FETCH_TIM     0xC3508000
 #define I225_TXPBSIZE_DEFAULT     0x04000014 /* TXPBSIZE default */
diff --git a/drivers/net/igc/igc_ethdev.c b/drivers/net/igc/igc_ethdev.c
index 04f62906e3..5e1a2dc43a 100644
--- a/drivers/net/igc/igc_ethdev.c
+++ b/drivers/net/igc/igc_ethdev.c
@@ -1004,7 +1004,7 @@ eth_igc_start(struct rte_eth_dev *dev)
 	adapter->stopped = 0;
 
 	if (igc_timestamp_dynflag > 0) {
-		adapter->cycle_time = NSEC_PER_SEC;
+		adapter->cycle_time = 40000000; //NSEC_PER_SEC;
     adapter->base_time = 0;
 
 		IGC_WRITE_REG(hw, IGC_TSAUXC, 0);
@@ -1038,14 +1038,32 @@ eth_igc_start(struct rte_eth_dev *dev)
       switch(i) {
         case 0:
           txqctl |= IGC_TXQCTL_QUEUE_MODE_LAUNCHT;
+          IGC_WRITE_REG(hw, IGC_STQT(i), 0);
+          IGC_WRITE_REG(hw, IGC_ENDQT(i), adapter->cycle_time);
+          break;
+
+        case 1:
+            IGC_WRITE_REG(hw, IGC_STQT(i), 0);
+            IGC_WRITE_REG(hw, IGC_ENDQT(i), 1500000);
+          break;
+
+        case 2:
+            IGC_WRITE_REG(hw, IGC_STQT(i), 0);
+            IGC_WRITE_REG(hw, IGC_ENDQT(i), 1500000);
+          break;
+
+        case 3:
+            IGC_WRITE_REG(hw, IGC_STQT(i), 0);
+            IGC_WRITE_REG(hw, IGC_ENDQT(i), 1500000);
           break;
+
         default:
           break;
       }
 
-      IGC_WRITE_REG(hw, IGC_STQT(i), 0);
-      IGC_WRITE_REG(hw, IGC_ENDQT(i), adapter->cycle_time);
-      
+      txqctl |= (0x00000002 | 0x00000004);
+
+      if(i < 2) {
 			tqavcc = IGC_READ_REG(hw, IGC_TQAVCC(i));
 			tqavcc &= ~(IGC_TQAVCC_IDLE_SLOPE |
 				    IGC_TQAVCC_KEEP_CREDITS);
@@ -1053,7 +1071,9 @@ eth_igc_start(struct rte_eth_dev *dev)
 
 			IGC_WRITE_REG(hw, IGC_TQAVHC(i), 0);
       
-      txqctl &= ~(IGC_TXQCTL_QAV_SEL_MASK);
+			txqctl &= ~(IGC_TXQCTL_QAV_SEL_MASK);
+      }
+      
       IGC_WRITE_REG(hw, IGC_TXQCTL(i), txqctl);
     }
     
diff --git a/drivers/net/igc/igc_txrx.c b/drivers/net/igc/igc_txrx.c
index 1754aa8307..1f2f781039 100644
--- a/drivers/net/igc/igc_txrx.c
+++ b/drivers/net/igc/igc_txrx.c
@@ -1532,7 +1532,7 @@ static int32_t igc_tx_launchtime(struct igc_tx_queue *txq, uint64_t txtime,
   clock_gettime(CLOCK_REALTIME, &now_ts);
   now = now_ts.tv_sec*NSEC_PER_SEC+now_ts.tv_nsec;
   
-  *early_deadline = (now + 300000 < txtime);
+  *early_deadline = (now + 600000 < txtime);
   if (*early_deadline) 
     return 0;
   
-- 
2.17.1

